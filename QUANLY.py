import antii
antii.protect()
import sys
from PyQt6.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QPushButton, QLineEdit, QLabel, QTabWidget, QHBoxLayout, QFrame, QSpacerItem, QSizePolicy, QDialog, QDialogButtonBox, QComboBox, QGridLayout
from PyQt6.QtWebEngineWidgets import QWebEngineView
from PyQt6.QtCore import QUrl
from PyQt6.QtGui import QFont, QIcon
import requests

class SettingsDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("C√†i ƒê·∫∑t")
        self.setFixedSize(300, 200)
        self.setStyleSheet("background-color: #2c3e50;")

        layout = QGridLayout()
        
        # Ch·ªçn m√†u n·ªÅn
        color_label = QLabel("Ch·ªçn m√†u n·ªÅn:")
        color_label.setStyleSheet("color: #ecf0f1; font-size: 14px;")
        layout.addWidget(color_label, 0, 0)
        
        self.color_combo = QComboBox()
        self.color_combo.addItems(["#f5f7fa", "#e0e0e0", "#d5f5e3", "#f5e6cc"])
        self.color_combo.setStyleSheet("color: #2c3e50; background-color: #ecf0f1; padding: 5px; border-radius: 5px;")
        layout.addWidget(self.color_combo, 0, 1)
        
        # Ch·ªçn k√≠ch th∆∞·ªõc
        size_label = QLabel("Ch·ªçn k√≠ch th∆∞·ªõc:")
        size_label.setStyleSheet("color: #ecf0f1; font-size: 14px;")
        layout.addWidget(size_label, 1, 0)
        
        self.size_combo = QComboBox()
        self.size_combo.addItems(["800x600", "1000x700", "1200x800"])
        self.size_combo.setStyleSheet("color: #2c3e50; background-color: #ecf0f1; padding: 5px; border-radius: 5px;")
        layout.addWidget(self.size_combo, 1, 1)
        
        # N√∫t OK v√† Apply
        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Apply)
        button_box.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                padding: 5px 15px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        button_box.accepted.connect(self.accept)
        button_box.button(QDialogButtonBox.StandardButton.Apply).clicked.connect(self.apply_settings)
        layout.addWidget(button_box, 2, 0, 1, 2)
        
        self.setLayout(layout)
        self.parent = parent

    def apply_settings(self):
        color = self.color_combo.currentText()
        size = self.size_combo.currentText()
        width, height = map(int, size.split("x"))
        self.parent.setStyleSheet(f"background-color: {color};")
        self.parent.setGeometry(100, 100, width, height)

class HelpDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng")
        self.setFixedSize(400, 300)
        self.setStyleSheet("background-color: #2c3e50;")

        layout = QVBoxLayout()
        
        # H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
        guide_label = QLabel("""
        <h3>H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng App Qu·∫£n L√Ω</h3>
        <p><strong>1. Tr√¨nh Duy·ªát:</strong> M·ªü trang web m·∫∑c ƒë·ªãnh.</p>
        <p><strong>2. Check Key:</strong> 
        <p>- Nh·∫≠p Key v√† (t√πy ch·ªçn) IP.</p>
        <p>- Nh·∫•n "Check Key" ƒë·ªÉ ki·ªÉm tra.</p>
        <p>- N·∫øu c√≥ IP th√¨ check key cho ip ƒë√≥.</p>
        <p>- N·∫øu kh√¥ng c√≥ IP, check key cho ip ch√≠nh b·∫£n th√¢n.</p>
        <p>- K·∫øt qu·∫£ hi·ªÉn th·ªã tr·∫°ng th√°i key v√† IP.</p>
        <p><strong>3. Check IP:</strong> Hi·ªÉn th·ªã trang web ki·ªÉm tra IP .</p>
        <p><strong>4. C√†i ƒê·∫∑t:</strong> Ch·ªçn m√†u n·ªÅn v√† k√≠ch th∆∞·ªõc c·ª≠a s·ªï.</p>
        <p><strong>5. Tr·ª£ Gi√∫p:</strong> Xem h∆∞·ªõng d·∫´n n√†y.</p>
        <p><strong>API</strong></p>
        <p>- Check key theo ip: https://vantrong.x10.mx/keyip/checkkey.php?ip={ip}&key={key}</p>
        <p>- Check ip: https://vantrong.x10.mx/keyip/?ip</p>
        <p>-Check key ko c·∫ßn ip, n√≥ t·ª± g√©t ip: https://vantrong.x10.mx/keyip/?key={key}</p>
        """)
        guide_label.setStyleSheet("color: #ecf0f1; font-size: 14px;")
        guide_label.setWordWrap(True)
        layout.addWidget(guide_label)
        
        # N√∫t OK
        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok)
        button_box.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                padding: 5px 15px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        button_box.accepted.connect(self.accept)
        layout.addWidget(button_box)
        
        self.setLayout(layout)

class IPDialog(QDialog):
    def __init__(self, ip, parent=None):
        super().__init__(parent)
        
        self.setWindowTitle("ƒê·ªãa ch·ªâ IP c·ªßa b·∫°n")
        self.setFixedSize(300, 150)
        self.setStyleSheet("background-color: #2c3e50;")

        layout = QVBoxLayout()
        
        # Hi·ªÉn th·ªã IP
        ip_label = QLabel(f"ƒê·ªãa ch·ªâ IP c·ªßa b·∫°n:\n{ip}")
        ip_label.setStyleSheet("color: #ecf0f1; font-size: 14px;")
        layout.addWidget(ip_label)
        
        # N√∫t Sao ch√©p
        copy_button = QPushButton("Sao ch√©p")
        copy_button.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                padding: 5px 15px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #219653;
            
            }
        """)
        copy_button.clicked.connect(lambda: QApplication.clipboard().setText(ip))
        layout.addWidget(copy_button)
        
        # N√∫t OK
        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok)
        button_box.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                padding: 5px 15px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        button_box.accepted.connect(self.accept)
        layout.addWidget(button_box)
        
        self.setLayout(layout)

class WebApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("QU·∫¢N L√ù")
        self.setWindowIcon(QIcon("app.ico"))
        self.setGeometry(100, 100, 1200, 700)
        self.setStyleSheet("background-color: #f5f7fa;")  # M√†u n·ªÅn m·∫∑c ƒë·ªãnh
        
        # T·∫Øt menu bar m·∫∑c ƒë·ªãnh c·ªßa h·ªá ƒëi·ªÅu h√†nh (n·∫øu c√≥)
        self.setMenuBar(None)
        
        # T·∫°o widget trung t√¢m
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QHBoxLayout()
        central_widget.setLayout(main_layout)
        
        # Thanh menu b√™n tr√°i
        self.menu = QVBoxLayout()
        self.menu_frame = QFrame()
        self.menu_frame.setStyleSheet("""
            background-color: #1e2a38; 
            border-radius: 15px; 
            padding: 20px;
        """)
        self.menu_frame.setLayout(self.menu)
        self.menu.setSpacing(15)
        
        # C√°c n√∫t menu
        self.browser_button = QPushButton("üåç Tr√¨nh Duy·ªát")
        self.check_key_button = QPushButton("üîë Check Key")
        self.check_ip_button = QPushButton("üì° Check IP")
        self.settings_button = QPushButton("‚öôÔ∏è C√†i ƒê·∫∑t")
        self.help_button = QPushButton("‚ùì Tr·ª£ Gi√∫p")
        
        for btn in [self.browser_button, self.check_key_button, self.check_ip_button, self.settings_button, self.help_button]:
            btn.setStyleSheet("""
                QPushButton {
                    background-color: #34495e; 
                    color: #ecf0f1; 
                    padding: 12px; 
                    border-radius: 8px; 
                    font-size: 14px;
                    border: none;
                }
                QPushButton:hover {
                    background-color: #4a6a8a;
                    color: #ffffff;
                }
                QPushButton:pressed {
                    background-color: #2c3e50;
                }
            """)
            btn.setFont(QFont("Arial", 12))
            self.menu.addWidget(btn)
        
        self.menu.addItem(QSpacerItem(20, 40, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Expanding))
        main_layout.addWidget(self.menu_frame, 2)
        
        # Tab Widget
        self.tabs = QTabWidget()
        self.tabs.setStyleSheet("""
            QTabWidget::pane {
                background-color: #ffffff; 
                border-radius: 15px; 
                padding: 10px;
            }
            QTabBar::tab {
                background-color: #d5dbde; 
                color: #2c3e50; 
                padding: 10px 20px; 
                border-top-left-radius: 8px;
                border-top-right-radius: 8px;
                margin-right: 2px;
                font-size: 14px;
            }
            QTabBar::tab:selected {
                background-color: #ffffff; 
                color: #3498db;
                font-weight: bold;
            }
            QTabBar::tab:hover {
                background-color: #e8ecef;
            }
        """)
        main_layout.addWidget(self.tabs, 5)
        
        # Tab Tr√¨nh Duy·ªát
        self.browser_tab = QWidget()
        self.browser_layout = QVBoxLayout()
        self.browser = QWebEngineView()
        self.browser.setUrl(QUrl("https://vantrong.x10.mx/keyip/?key=vantrongdeptrai"))
        self.browser_layout.addWidget(self.browser)
        self.browser_tab.setLayout(self.browser_layout)
        self.tabs.addTab(self.browser_tab, "üåç Tr√¨nh Duy·ªát")
        
        # Tab Check Key
        self.check_key_tab = QWidget()
        self.check_key_layout = QVBoxLayout()
        
        # Ti√™u ƒë·ªÅ Check Key
        self.check_key_label = QLabel("Check Key")
        self.check_key_label.setFont(QFont("Arial", 16, QFont.Weight.Bold))
        self.check_key_label.setStyleSheet("color: #2c3e50; margin-bottom: 10px;")
        self.check_key_layout.addWidget(self.check_key_label)
        
        # √î nh·∫≠p Key
        self.key_input_label = QLabel("Key:")
        self.key_input_label.setFont(QFont("Arial", 12))
        self.key_input_label.setStyleSheet("color: #2c3e50;")
        self.check_key_layout.addWidget(self.key_input_label)
        
        self.key_input = QLineEdit()
        self.key_input.setPlaceholderText("Nh·∫≠p key c·ªßa b·∫°n")
        self.key_input.setStyleSheet("""
            padding: 10px; 
            border: 2px solid #d5dbde; 
            border-radius: 8px; 
            font-size: 14px;
            background-color: #ffffff;
            color: #000000; /* ƒê·ªïi m√†u ch·ªØ th√†nh ƒëen */
        """)
        self.check_key_layout.addWidget(self.key_input)
        
        # √î nh·∫≠p IP
        self.ip_input_label = QLabel("IP:")
        self.ip_input_label.setFont(QFont("Arial", 12))
        self.ip_input_label.setStyleSheet("color: #2c3e50;")
        self.check_key_layout.addWidget(self.ip_input_label)
        
        self.ip_input = QLineEdit()
        self.ip_input.setPlaceholderText("Nh·∫≠p IP c·ªßa b·∫°n (t√πy ch·ªçn)")
        self.ip_input.setStyleSheet("""
            padding: 10px; 
            border: 2px solid #d5dbde; 
            border-radius: 8px; 
            font-size: 14px;
            background-color: #ffffff;
            color: #000000; /* ƒê·ªïi m√†u ch·ªØ th√†nh ƒëen */
        """)
        self.check_key_layout.addWidget(self.ip_input)
        
        # N√∫t Check Key
        self.check_button = QPushButton("üîç Check Key")
        self.check_button.setStyleSheet("""
            QPushButton {
                background-color: #3498db; 
                color: white; 
                padding: 12px; 
                border-radius: 8px;
                font-size: 14px;
                border: none;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
            QPushButton:pressed {
                background-color: #1f6390;
            }
        """)
        self.check_button.clicked.connect(self.check_key)
        self.check_key_layout.addWidget(self.check_button)
        
        # Label k·∫øt qu·∫£
        self.result_label = QLabel("Nh·∫≠p key v√† nh·∫•n Check")
        self.result_label.setFont(QFont("Arial", 12))
        self.result_label.setStyleSheet("color: #2c3e50; margin-top: 10px;")
        self.check_key_layout.addWidget(self.result_label)
        
        self.check_key_layout.addStretch()
        self.check_key_tab.setLayout(self.check_key_layout)
        self.tabs.addTab(self.check_key_tab, "üîë Check Key")
        
        # Tab Check IP
        self.check_ip_tab = QWidget()
        self.check_ip_layout = QVBoxLayout()
        self.check_ip_browser = QWebEngineView()
        self.check_ip_browser.setUrl(QUrl("https://vantrong.x10.mx/keyip/"))
        self.check_ip_layout.addWidget(self.check_ip_browser)
        self.check_ip_tab.setLayout(self.check_ip_layout)
        self.tabs.addTab(self.check_ip_tab, "üì° Check IP")
        
        # K·∫øt n·ªëi c√°c n√∫t menu v·ªõi tab
        self.browser_button.clicked.connect(lambda: self.tabs.setCurrentIndex(0))
        self.check_key_button.clicked.connect(lambda: self.tabs.setCurrentIndex(1))
        self.check_ip_button.clicked.connect(lambda: self.tabs.setCurrentIndex(2))
        self.settings_button.clicked.connect(self.show_settings)
        self.help_button.clicked.connect(self.show_help)
        
        # L·∫•y IP c·ªßa m√°y
        self.get_local_ip()

    def check_key(self):
        key = self.key_input.text().strip()
        ip = self.ip_input.text().strip()
        
        if not key:
            self.result_label.setText("‚ö†Ô∏è Vui l√≤ng nh·∫≠p key!")
            self.result_label.setStyleSheet("color: #e67e22; margin-top: 10px;")
            return
        
        # N·∫øu c√≥ nh·∫≠p IP, d√πng API m·ªõi
        if ip:
            url = f"https://vantrong.x10.mx/keyip/checkkey.php?ip={ip}&key={key}"
        else:
            url = f"https://vantrong.x10.mx/keyip/?key={key}"
        
        try:
            response = requests.get(url)
            response.raise_for_status()  # Ki·ªÉm tra l·ªói HTTP
            data = response.json()
            
            if data.get("status"):
                ip_text = f"IP c·ªßa b·∫°n: {ip}" if ip else f"IP c·ªßa b·∫°n: {self.local_ip}"
                self.result_label.setText(f"‚úÖ Key h·ª£p l·ªá!\n{ip_text}")
                self.result_label.setStyleSheet("color: #27ae60; margin-top: 10px;")
            else:
                ip_text = f"IP c·ªßa b·∫°n: {ip}" if ip else f"IP c·ªßa b·∫°n: {self.local_ip}"
                self.result_label.setText(f"‚ùå Key kh√¥ng h·ª£p l·ªá!\n{ip_text}")
                self.result_label.setStyleSheet("color: #c0392b; margin-top: 10px;")
        except requests.exceptions.RequestException as e:
            self.result_label.setText("‚ö†Ô∏è L·ªói k·∫øt n·ªëi! Vui l√≤ng ki·ªÉm tra m·∫°ng.")
            self.result_label.setStyleSheet("color: #e67e22; margin-top: 10px;")
        except ValueError:
            self.result_label.setText("‚ö†Ô∏è L·ªói ƒë·ªãnh d·∫°ng d·ªØ li·ªáu t·ª´ server!")
            self.result_label.setStyleSheet("color: #e67e22; margin-top: 10px;")

    def get_local_ip(self):
        # L·∫•y IP c·ªßa m√°y
        try:
            response = requests.get("https://api.ipify.org?format=json")
            response.raise_for_status()
            data = response.json()
            self.local_ip = data.get("ip", "Kh√¥ng x√°c ƒë·ªãnh")
        except requests.exceptions.RequestException:
            self.local_ip = "Kh√¥ng x√°c ƒë·ªãnh"
        
        # Hi·ªÉn th·ªã dialog IP
        self.show_ip_dialog()

    def show_ip_dialog(self):
        dialog = IPDialog(self.local_ip, self)
        dialog.exec()

    def show_settings(self):
        dialog = SettingsDialog(self)
        dialog.exec()

    def show_help(self):
        dialog = HelpDialog(self)
        dialog.exec()

if __name__ == "__main__":
    #hide_console()
    app = QApplication(sys.argv)
    window = WebApp()
    window.show()
    sys.exit(app.exec())